from config import *
from models import *


default_keyboard = VkKeyboard(one_time=False)
default_keyboard.add_button(label='–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', color=VkKeyboardColor.DEFAULT, payload={'action': 'capabilities'})
default_keyboard = default_keyboard.get_keyboard()


def show_capabilities(id):
    user = User.get(User.id == id)

    keyboard = VkKeyboard(one_time=True)

    if user.token is None:
        keyboard.add_button(label='–ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é', color=VkKeyboardColor.DEFAULT, payload={'action': 'auth'})
    else:
        keyboard.add_button(label='–£–∑–Ω–∞—Ç—å –î–ó', color=VkKeyboardColor.PRIMARY, payload={'action': 'homework'})
        keyboard.add_button(label='–£–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫–∏', color=VkKeyboardColor.PRIMARY, payload={'action': 'marks'})
        keyboard.add_line()
        keyboard.add_button(label='–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', color=VkKeyboardColor.PRIMARY, payload={'action': 'schedule'})
        keyboard.add_line()
        keyboard.add_button(label='–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –≠–ª–ñ—É—Ä', color=VkKeyboardColor.DEFAULT, payload={'action': 'logout'})

    keyboard.add_line()
    keyboard.add_button(label='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', color=VkKeyboardColor.DEFAULT, payload={'action': 'review'})
    keyboard.add_line()
    keyboard.add_button(label='–û –ø—Ä–æ–µ–∫—Ç–µ', color=VkKeyboardColor.DEFAULT, payload={'action': 'about'})
    keyboard.add_button(label='–ü–æ–º–æ—â—å', color=VkKeyboardColor.DEFAULT, payload={'action': 'help'})

    if user.role == 'admin':
        keyboard.add_line()
        keyboard.add_button(label='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', color=VkKeyboardColor.POSITIVE, payload={'action': 'get_statistics'})
        keyboard.add_button(label='–û—Ç–∑—ã–≤—ã', color=VkKeyboardColor.POSITIVE, payload={'action': 'read_reviews'})
        keyboard.add_line()
        keyboard.add_button(label='–†–∞—Å—Å—ã–ª–∫–∞', color=VkKeyboardColor.POSITIVE, payload={'action': 'make_newsletter'})

    vk.messages.send(user_id=id, message='–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üëá', keyboard=keyboard.get_keyboard())


def is_account(data, id):
    if data['text'] == '–î–∞':
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button(label='–î–∞', color=VkKeyboardColor.POSITIVE, payload={'action': 'auth'})
        keyboard.add_button(label='–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE, payload={'action': 'auth'})
        vk.messages.send(user_id=id, message='–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ–π—á–∞—Å?', keyboard=keyboard.get_keyboard())
    else:
        vk.messages.send(user_id=id, message='–ñ–∞–ª—å, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚òπ\n'
                                             '–¢–æ–≥–¥–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –æ —á—ë–º-–Ω–∏–±—É–¥—å!', keyboard=default_keyboard)


def auth(data, id):
    if data['text'] == '–ù–µ—Ç':
        vk.messages.send(user_id=id, message='–•–æ—Ä–æ—à–æ, –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ üôÉ', keyboard=default_keyboard)
    else:
        vk.messages.send(user_id=id, message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≠–ª–ñ—É—Ä üëá \n' + APP_URL + '/auth/' + id,
                         keyboard=default_keyboard)


def logout(id):
    user = User.get(User.id == id)
    user.token = None
    user.save()
    vk.messages.send(user_id=id, message='–ì–æ—Ç–æ–≤–æ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è/–î–ó –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', keyboard=default_keyboard)


def review(id):
    vk.messages.send(user_id=id, message='–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ üëá \n' + APP_URL + '/review', keyboard=default_keyboard)


def about(id):
    vk.messages.send(user_id=id, message='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –õ–∏—Ü–µ—è –í–®–≠ \n\n'
                                         '–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ª–∏—Ü–µ–∏—Å—Ç–∞–º–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n'
                                         '1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è\n'
                                         '2. –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏\n'
                                         '3. –î–∏–∑–∞–π–Ω\n'
                                         '4. –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è',
                     keyboard=default_keyboard)


def help(id):
    vk.messages.send(user_id=id, message='–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É - sd.denisoff@gmail.com',
                     keyboard=default_keyboard)


def statistics(id):
    reg = User.select().count()
    auth = User.select().where(User.token != None).count()
    vk.messages.send(user_id=id, message='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ - ' + str(reg) + '\n' + '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ - ' + str(auth), keyboard=default_keyboard)


def read_reviews(id):
    all = Review.select().count()
    for_reading = Review.select().where(Review.was_read == False).first()
    if for_reading is None:
        vk.messages.send(user_id=id, message='–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç üôÅ', keyboard=default_keyboard)
    else:
        for_reading.was_read = True
        for_reading.save()
    review_temp = '–¢–µ–∫—Å—Ç: {text}\n–î–∞—Ç–∞: {date}'
    keyboard = VkKeyboard(one_time=True)
    if for_reading.id != all:
        keyboard.add_button(label='–°–ª–µ–¥—É—é—â–∏–π (' + str(for_reading.id) + '/' + str(all) + ')', color=VkKeyboardColor.PRIMARY, payload={'action': 'read_reviews'})
    else:
        keyboard.add_button(label='–í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ! (' + str(for_reading.id) + '/' + str(all) + ')', color=VkKeyboardColor.PRIMARY, payload={'action': 'capabilities'})
    vk.messages.send(user_id=id, message=review_temp.format(text=for_reading.text, date=for_reading.date), keyboard=keyboard.get_keyboard())


def make_newsletter(id):
    vk.messages.send(user_id=id, message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ üëá \n' + APP_URL + '/news', keyboard=default_keyboard)
